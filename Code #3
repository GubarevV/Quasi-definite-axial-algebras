######## We start with the code 
######## https://github.com/AlexeyStaroletov/AxialAlgebras/blob/master/3gen/DataJordanHalf.g
######## We prove that if an axial algebra A is generated by axes a,b,c, then A_0(a) is generated by x_a(b), x_a(c), x_a(b^tau c), and x_a((c^tau a)^tau b)

xb:=(2*ab - alp*a - b)/(alp-1);
######## gap> [ (-alp)/(alp-1), (-1)/(alp-1), 0, (2)/(alp-1), 0, 0, 0, 0, 0 ]

xc:=(2*ac - gam*a - c)/(gam-1);
######## gap> [ -gam/(gam-1), 0, 1/(-gam+1), 0, 0, 1/(1/2*gam-1/2), 0, 0, 0 ]

btau:=b*tauc;;
xbtau:=(2*prod(a,btau) - ((a*Gram)*btau)*a - btau)/((a*Gram)*btau-1);
######## gap> [ (-4*bet*gam-alp+4*phi)/(4*bet*gam+alp-4*phi-1), 1/(-4*bet*gam-alp+4*phi+1), -4*bet/(4*bet*gam+alp-4*phi-1), 
  1/(2*bet*gam+1/2*alp-2*phi-1/2), 1/(bet*gam+1/4*alp-phi-1/4), 8*bet/(4*bet*gam+alp-4*phi-1), 1/(-1/2*bet*gam-1/8*alp+1/2*phi+1/8), 0, 0 ]

cc:=(c*taua)*taub;;
xcc:=(2*prod(a,cc) - ((a*Gram)*cc)*a - cc)/((a*Gram)*cc-1);
######## gap> [ (-16*alp^2*gam-4*alp*bet-8*alp*gam+16*alp*phi-gam+4*phi)/(16*alp^2*gam+4*alp\*bet-8*alp*gam-16*alp*phi+gam+4*phi-1), 
  (-16*alp*gam-4*bet+16*phi)/(16*alp^2*gam+4*alp*bet-8*alp*gam-16*alp*phi+gam+\4*phi-1), 1/(-16*alp^2*gam-4*alp*bet+8*alp*gam+16*alp*phi-gam-4*phi+1), 
  (32*alp*gam+8*bet+8*gam-32*phi)/(16*alp^2*gam+4*alp*bet-8*alp*gam-16*alp*phi\+gam+4*phi-1), 1/(4*alp^2*gam+alp*bet-2*alp*gam-4*alp*phi+1/4*gam+phi-1/4), 
  (8*alp+2)/(16*alp^2*gam+4*alp*bet-8*alp*gam-16*alp*phi+gam+4*phi-1), 0, 1/(-2*alp^2*gam-1/2*alp*bet+alp*gam+2*alp*phi-1/8*gam-1/2*phi+1/8), 
  1/(-2*alp^2*gam-1/2*alp*bet+alp*gam+2*alp*phi-1/8*gam-1/2*phi+1/8) ]
######## We see that xb, xc, xbtau, xcc are linearly independent (by the 4th, 6th, 7th, and 9th coordinates)
######## Since dim(A_0) = 4, A_0 is generated by x_a(b), x_a(c), x_a(b^tau c), and x_a((c^tau a)^tau b)

prod(a,btau);
######## gap> [ 0, 0, 0, 1, 0, 4*bet, -4, 0, 0 ]
prod(a,cc);
######## gap> [ -8*alp*gam+2*gam+4*phi, 0, 0, 16*alp*gam+4*bet-4*gam-16*phi, 0, 4*alp-1, 0, 4, -4 ]
######## Thus, we have checked that b^tau c and (c^tau a)^tau b lie in R

b-xb-(b*Gram*a)*(a-xb);
######## gap> [ -2*alp, 0, 0, 2, 0, 0, 0, 0, 0 ]
c-xc-(c*Gram*a)*(a-xc);
######## gap> [ -2*gam, 0, 0, 0, 0, 2, 0, 0, 0 ]
btau-xbtau-(btau*Gram*a)*(a-xbtau);
######## gap> [ -8*bet*gam-2*alp+8*phi, 0, 0, 2, 0, 8*bet, -8, 0, 0 ]
cc-xcc-(xcc*Gram*a)*(a-xcc);
######## gap> [ (64*alp^2*gam^2+16*alp^2*gam+16*alp*bet*gam-32*alp*gam^2-64*alp*gam*phi+4*alp*bet+8*alp*gam-16*alp*phi+4*gam^2+16*gam*phi-3*gam-4*phi)/(16*alp^2*gam+4*alp\
*bet-8*alp*gam-16*alp*phi+gam+4*phi-1), 
  (256*alp^3*gam^2+128*alp^2*bet*gam-128*alp^2*gam^2-512*alp^2*gam*phi+16*alp*bet^2-32*alp*bet*gam-128*alp*bet*phi+16*alp*gam^2+192*alp*gam*phi+256*alp*phi^2+4*bet*gam+16*bet*phi-16*gam*phi-64*phi^2)/(16*alp^2*gam+4*alp*bet-8*alp*gam-\
16*alp*phi+gam+4*phi-1), 
  (-16*alp^2*gam-4*alp*bet+8*alp*gam+16*alp*phi-gam-4*phi)/(-16*alp^2*gam-4*alp*bet+8*alp*gam+16*alp*phi-gam-4*phi+1), 
  (-256*alp^2*gam^2-64*alp*bet*gam+128*alp*gam^2+256*alp*gam*phi-32*alp*gam-16*gam^2-64*gam*phi-8*bet+8*gam+32*phi)/(16*alp^2*gam+4*alp*bet-8*alp*gam-16*alp\
*phi+gam+4*phi-1), 
  (-16*alp^2*gam-4*alp*bet+8*alp*gam+16*alp*phi-gam-4*phi)/(4*alp^2*gam+alp*bet-2*alp*gam-4*alp*phi+1/4*gam+phi-1/4), 
  (-64*alp^2*gam-16*alp*bet+32*alp*gam+64*alp*phi-8*alp-4*gam-16*phi+2)/(16*alp^2*gam+4*alp*bet-8*alp*gam-16*alp*phi+gam+4*phi-1), 
   0, 
  (-32*alp^2*gam-8*alp*bet+16*alp*gam+32*alp*phi-2*gam-8*phi+1)/(-2*alp^2*gam-1/2*alp*bet+alp*gam+2*alp*phi-1/8*gam-1/2*phi+1/8), 
  -1/(-2*alp^2*gam-1/2*alp*bet+alp*gam+2*alp*phi-1/8*gam-1/2*phi+1/8) ]
